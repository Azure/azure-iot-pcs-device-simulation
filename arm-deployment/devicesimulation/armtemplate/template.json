{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "solutionTemplateRepository": {
      "type": "string",
      "defaultValue": "[concat('https://raw.githubusercontent.com/Azure/azure-iot-pcs-device-simulation/', parameters('pcsReleaseVersion'), '/arm-deployment/devicesimulation')]",
      "metadata": {
        "description": "The folder where ARM template and setup scripts will be downloaded from during the VM setup (use the parent of 'armtemplate' and 'single-vm' folders, e.g. https://raw.githubusercontent.com/Azure/azure-iot-pcs-device-simulation/master/arm-deployment/devicesimulation)"
      }
    },
    "pcsDockerTag": {
      "type": "string",
      "defaultValue": "DS-2.0.9",
      "metadata": {
        "description": "The docker images tag to use in 'docker-compose.yml'"
      }
    },
    "pcsReleaseVersion":
    {
      "type": "string",
      "defaultValue": "DS-2.0.9",
      "metadata": {
        "description": "The release version is used for repoURL for reverse-proxy-dotnet and vmScriptUri"
      }
    },
    "solutionName": {
      "type": "string",
      "metadata": {
        "description": "The name of the solution"
      }
    },
    "storageName": {
      "type": "string",
      "defaultValue": "[concat('storage', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
      "metadata": {
        "description": "The name of the storageAccount"
      }
    },
    "storageSkuName": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "The storage SKU name"
      }
    },
    "resourcesNamePrefix": {
      "type": "string",
      "defaultValue": "[toLower(concat(take(parameters('solutionName'), 20), '-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 3), '-'))]",
      "metadata": {
        "description": "Prefix used for Azure resources names"
      }
    },
    "solutionType": {
      "type": "string",
      "defaultValue": "DeviceSimulation",
      "metadata": {
        "description": "The type of the solution"
      }
    },
    "aadTenantId": {
      "type": "string",
      "defaultValue": "novalue",
      "metadata": {
        "description": "The AAD tenant identifier (GUID)"
      }
    },
    "aadInstance": {
      "type": "string",
      "defaultValue": "https://login.microsoftonline.com/",
      "metadata": {
        "description": "URL of the AAD login page (example: https://login.microsoftonline.com/)"
      }
    },
    "aadClientId": {
      "type": "string",
      "defaultValue": "novalue",
      "metadata": {
        "description": "AAD application identifier (GUID)"
      }
    },
    "documentDBName": {
      "type": "string",
      "defaultValue": "[concat(parameters('resourcesNamePrefix'), 'db')]",
      "metadata": {
        "description": "The name of the CosmosDB"
      }
    },
    "cosmosDbSqlConsistencyLevel": {
      "type": "string",
      "defaultValue": "Strong",
      "allowedValues": [
        "Strong",
        "BoundedStaleness",
        "Session",
        "ConsistentPrefix",
        "Eventual"
      ],
      "metadata": {
        "description": "The CosmosDB default consistency level for this account."
      }
    },
    "cosmosDbSqlMaxStalenessPrefix": {
      "type": "int",
      "defaultValue": 10,
      "minValue": 10,
      "maxValue": 1000,
      "metadata": {
        "description": "When CosmosDB consistency level is set to BoundedStaleness, then this value is required, otherwise it can be ignored."
      }
    },
    "cosmosDbSqlMaxIntervalInSeconds": {
      "type": "int",
      "defaultValue": 5,
      "minValue": 5,
      "maxValue": 600,
      "metadata": {
        "description": "When CosmosDB consistency level is set to BoundedStaleness, then this value is required, otherwise it can be ignored."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Admin username on all VMs."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "GEN-PASSWORD",
      "metadata": {
        "description": "Admin password on all VMs. Must between 12 and 72 characters long and have 3 of the following: 1 uppercase character, 1 lowercase character, 1 number and 1 special character that is not slash (\\) or dash (-)."
      }
    },
    "iotHubName": {
      "type": "string",
      "defaultValue": "[concat('iothub-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 5))]",
      "metadata": {
        "description": "The name of Azure IoT Hub"
      }
    },
    "iotHubSku": {
      "type": "string",
      "defaultValue": "S2",
      "allowedValues": [ "F1", "S1", "S2", "S3" ],
      "metadata": {
        "description": "The Azure IoT Hub SKU"
      }
    },
    "iotHubTier": {
      "type": "string",
      "defaultValue": "Standard",
      "allowedValues": [ "Free", "Standard" ],
      "metadata": {
        "description": "The Azure IoT Hub tier"
      }
    },
    "iotHubUnits": {
      "type": "int",
      "minValue": 1,
      "maxValue": 100,
      "defaultValue": 1,
      "metadata": {
        "description": "The number of IoT Hub units created"
      }
    },
    "vmSku": {
      "type": "string",
      "defaultValue": "Standard_F4",
      "metadata": {
        "description": "Size of VMs in the VM Scale Set."
      }
    },
    "vmSetupScriptUri": {
      "type": "string",
      "defaultValue": "[concat('https://raw.githubusercontent.com/Azure/azure-iot-pcs-device-simulation/', parameters('pcsReleaseVersion'), '/arm-deployment/devicesimulation/single-vm/setup-wrapper.sh')]",
      "metadata": {
        "description": "The URL of the script used for VM setup"
      }
    },
    "vmFQDNSuffix": {
      "type": "string",
      "defaultValue": "cloudapp.azure.com",
      "allowedValues": [
        "cloudapp.azure.com",
        "cloudapp.chinacloudapi.cn",
        "cloudapp.azure.de"
      ]
    },
    "vmssName": {
      "type": "string",
      "defaultValue": "[toLower(concat(take(parameters('solutionName'), 5), '-', take(uniqueString(subscription().subscriptionId, resourceGroup().id, parameters('solutionName')), 3)))]",
      "metadata": {
        "description": "String used as a base for naming resources (9 characters or less). A hash is prepended to this string for some resources, and resource-specific information is appended."
      },
      "maxLength": 9
    },
    "vmssInstanceCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "Number of VM instances."
      },
      "maxValue": 500
    },
    "azureWebsiteName": {
      "type": "string",
      "metadata": {
        "description": "The name of the azure website that you want to create. It will be of format {azureWebsiteName}.azurewebsites.net"
      }
    },
    "remoteEndpointSSLThumbprint": {
      "type": "string",
      "defaultValue": "1230000000000000000000000000000000000000",
      "metadata": {
        "description": "This is the thumbprint of the HTTPS SSL Certificate"
      }
    },
    "remoteEndpointCertificate": {
      "type": "securestring",
      "metadata": {
        "description": "The SSL certificate public key used by the web server in the VMs"
      }
    },
    "remoteEndpointCertificateKey": {
      "type": "securestring",
      "metadata": {
        "description": "The SSL certificate private key used by the web server in the VMs"
      }
    },
    "domain": {
      "type": "string",
      "defaultValue": "microsoft.onmicrosoft.com",
      "metadata": {
        "description": "The Azure Active Directory domain used by the Azure Subscription where the solution is deployed"
      }
    },
    "subscriptionId": {
      "type": "string",
      "defaultValue": "[subscription().subscriptionId]",
      "metadata": {
        "description": "ID of the Azure Subscription where the solution is deployed"
      }
    },
    "aadClientServicePrincipalId": {
      "metadata": {
        "description": "Client ID (used by cloudprovider)"
      },
      "type": "securestring",
      "defaultValue": "n/a"
    },
    "aadClientSecret": {
      "metadata": {
        "description": "The Service Principal Client Secret."
      },
      "type": "securestring",
      "defaultValue": "n/a"
    },
    "cloudType": {
      "type": "string",
      "defaultValue": "Global",
      "allowedValues": [
        "Global",
        "China",
        "Germany",
        "Fairfax"
      ],
      "metadata": {
        "description": "Cloud environment name"
      }
    },
    "deploymentId": {
      "type": "string",
      "defaultValue": "Undefined",
      "metadata": {
        "description": "Unique Id of the deployment."
      }
    },
    "storageEndpointSuffix":
    {
      "type": "string",
      "defaultValue": "core.windows.net",
      "allowedValues": [
        "core.windows.net",
        "core.chinacloudapi.cn",
        "core.cloudapi.de"
      ],
      "metadata": {
        "description": "NOT USED"
      }
    },
    "applicationInsightsInstrumentationKey": {
      "type": "string",
      "defaultValue": "Undefined",
      "metadata": {
        "description": "The Application Insights instrumentation key for this deployment type"
      }
    }
  },
  "variables": {
    "osType": {
      "publisher": "Canonical",
      "offer": "UbuntuServer",
      "sku": "18.04-LTS",
      "version": "latest"
    },
    "imageReference": "[variables('osType')]",
    "iotHubApiVersion": "2017-01-19",
    "iotHubResourceId": "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
    "iotHubKeyName": "iothubowner",
    "iotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('iotHubKeyName'))]",
    "appServiceSku": "S1",
    "appServiceCapacity": "1",
    "webAppRepoURL": "https://github.com/Azure/reverse-proxy-dotnet.git",
    "webAppRepoBranch": "master",
    "webAppPlanName": "[concat(parameters('azureWebsiteName'), '-plan')]",
    "cosmosDBApiVersion": "2016-03-19",
    "cosmosDBResourceId": "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('documentDBName'))]",
    "location": "[resourceGroup().location]",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "virtualNetworkName": "[concat(parameters('vmssName'), '-vnet')]",
    "subnetName": "[concat(parameters('vmssName'), '-subnet')]",
    "storageApiVersion": "2017-06-01",
    "storageResourceId": "[resourceId('Microsoft.Storage/storageAccounts/', parameters('storageName'))]",
    "publicIPAddressName": "[concat(parameters('vmssName'), '-publicIP')]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "natPoolName": "[concat(parameters('vmssName'), '-natpool')]",
    "backendPoolName": "[concat(parameters('vmssName'), '-bepool')]",
    "nicName": "[concat(parameters('vmssName'), '-nic')]",
    "ipConfigName": "[concat(parameters('vmssName'), '-ipconfig')]",
    "loadBalancerName": "[concat(parameters('vmssName'), '-lb')]",
    "loadBalancerID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "frontEndIPConfigID": "[concat(variables('loadBalancerID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "networkSecurityGroupName": "[concat(parameters('vmssName'), '-nsg')]",
    "networkApiVersion": "2017-04-01",
    "vmFQDN": "[concat(parameters('vmssName'), '.', variables('location'), '.', parameters('vmFQDNSuffix'))]"
  },
  "resources": [
    {
      "comments": "Azure IoT Hub",
      "apiVersion": "[variables('iotHubApiVersion')]",
      "type": "Microsoft.Devices/Iothubs",
      "name": "[parameters('iotHubName')]",
      "location": "[variables('location')]",
      "sku": {
          "name": "[parameters('iotHubSku')]",
          "tier": "[parameters('iotHubTier')]",
          "capacity": "[parameters('iotHubUnits')]"
      },
      "properties": {
          "location": "[variables('location')]"
      },
      "tags": {
          "IotSuiteType": "[parameters('solutionType')]"
      }
    },
    {
      "comments": "Azure CosmosDB",
      "apiVersion": "[variables('cosmosDBApiVersion')]",
      "type": "Microsoft.DocumentDb/databaseAccounts",
      "name": "[parameters('documentDBName')]",
      "location": "[variables('location')]",
      "properties": {
        "name": "[parameters('documentDBName')]",
        "databaseAccountOfferType": "standard",
        "consistencyPolicy": {
          "defaultConsistencyLevel": "[parameters('cosmosDbSqlConsistencyLevel')]",
          "maxStalenessPrefix": "[parameters('cosmosDbSqlMaxStalenessPrefix')]",
          "maxIntervalInSeconds": "[parameters('cosmosDbSqlMaxIntervalInSeconds')]"
        }
      },
      "tags": {
        "IotSuiteType": "[parameters('solutionType')]"
      }
    },
    {
      "comments": "AppService plan to host the Application Gateway Web App",
      "type": "Microsoft.Web/serverfarms",
      "name": "[variables('webAppPlanName')]",
      "sku": {
        "name": "[variables('appServiceSku')]",
        "capacity": "[variables('appServiceCapacity')]"
      },
      "apiVersion": "2015-08-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('webAppPlanName')]"
      },
      "tags": {
        "IotSuiteType": "[parameters('solutionType')]"
      }
    },
    {
      "comments": "Application Gateway Web App",
      "type": "Microsoft.Web/sites",
      "name": "[parameters('azureWebsiteName')]",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('webAppPlanName'))]"
      ],
      "apiVersion": "2015-08-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "enabled": true,
        "clientAffinityEnabled": false,
        "serverFarmId": "[variables('webAppPlanName')]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "REMOTE_ENDPOINT",
              "value": "[concat('https://', reference(variables('publicIPAddressName')).dnsSettings.fqdn)]"
            },
            {
              "name": "REMOTE_ENDPOINT_SSL_THUMBPRINT",
              "value": "[parameters('remoteEndpointSSLThumbprint')]"
            }
          ]
        }
      },
      "resources": [
        {
          "type": "sourcecontrols",
          "name": "web",
          "apiVersion": "2015-08-01",
          "properties": {
            "RepoUrl": "[variables('webAppRepoURL')]",
            "branch": "[variables('webAppRepoBranch')]",
            "IsManualIntegration": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/Sites', parameters('azureWebsiteName'))]"
          ]
        }
      ],
      "tags": {
        "IotSuiteType": "[parameters('solutionType')]"
      }
    },
    {
      "comments": "Storage account used to store the VM disk",
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[parameters('storageName')]",
      "apiVersion": "[variables('storageApiVersion')]",
      "location": "[variables('location')]",
      "kind": "Storage",
      "sku": {
          "name": "[parameters('storageSkuName')]"
      },
      "tags": {
          "IotSuiteType": "[parameters('solutionType')]"
      }
    },
    {
      "comments": "Security rules used for the VM network interface",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupName')]",
      "apiVersion": "[variables('networkApiVersion')]",
      "location": "[variables('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "HTTPS",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 100,
              "direction": "Inbound"
            }
          },
          {
            "name": "SSH",
            "properties": {
              "protocol": "TCP",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Deny",
              "priority": 101,
              "direction": "Inbound"
            }
          }
        ]
      },
      "tags": {
        "IotSuiteType": "[parameters('solutionType')]"
      }
    },
    {
      "comments": "VM load balancer IP",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[variables('location')]",
      "apiVersion": "2017-04-01",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[parameters('vmssName')]"
        }
      },
      "tags": {
        "IotSuiteType": "[parameters('solutionType')]"
      }
    },
    {
      "comments": "VM load balancer",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "location": "[variables('location')]",
      "apiVersion": "2017-04-01",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('backendPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
              "name": "[variables('natPoolName')]",
              "properties": {
                  "frontendIPConfiguration": {
                      "id": "[variables('frontEndIPConfigID')]"
                  },
                  "frontendPort": 443,
                  "backendPort": 443,
                  "enableFloatingIP": false,
                  "idleTimeoutInMinutes": 4,
                  "protocol": "Tcp",
                  "enableTcpReset": false,
                  "loadDistribution": "Default",
                  "backendAddressPool": {
                      "id":  "[concat(variables('loadBalancerID'), '/backendAddressPools/', variables('backendPoolName'))]"
                  },
                  "probe": {
                      "id": "[concat(variables('loadBalancerID'), '/probes/', variables('natPoolName'))]"
                  }
              }
          }
      ],
      "probes": [
          {
              "name": "[variables('natPoolName')]",
              "properties": {
                  "protocol": "Tcp",
                  "port": 443,
                  "intervalInSeconds": 5,
                  "numberOfProbes": 2
              }
          }
      ],
      "inboundNatRules": [],
      "inboundNatPools": []
      },
      "tags": {
        "IotSuiteType": "[parameters('solutionType')]"
      }
    },
    {
      "comments": "Virtual machines network",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('location')]",
      "apiVersion": "2017-04-01",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      },
      "tags": {
        "IotSuiteType": "[parameters('solutionType')]"
      }
    },
    {
      "comments": "Virtual machines set",
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[parameters('vmssName')]",
      "location": "[variables('location')]",
      "apiVersion": "2017-03-30",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "sku": {
        "name": "[parameters('vmSku')]",
        "tier": "Standard",
        "capacity": "[parameters('vmssInstanceCount')]"
      },
      "properties": {
        "overprovision": "false",
        "upgradePolicy": {
          "mode": "Automatic"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage"
            },
            "imageReference": "[variables('imageReference')]"
          },
          "osProfile": {
            "computerNamePrefix": "[parameters('vmssName')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicName')]",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetName'))]"
                        },
                        "publicipaddressconfiguration": {
                          "name": "pub1",
                          "properties": {
                            "idleTimeoutInMinutes": 15
                          }
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('backendPoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "filesextension",
                "properties": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": [
                      "[parameters('vmSetupScriptUri')]"
                    ],
                    "commandToExecute": "[concat('bash setup-wrapper.sh --log-level Info --hostname ', '\"', variables('vmFQDN'), '\"', ' --resource-group-location ', '\"', variables('location'), '\"',  ' --vmss-name ', '\"', parameters('vmssName'), '\"', ' --docdb-connstring ', '\"', 'AccountEndpoint=', reference(variables('cosmosDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('cosmosDBResourceId'), variables('cosmosDBApiVersion')).primaryMasterKey, ';', '\"', ' --ssl-certificate ', '\"', parameters('remoteEndpointCertificate'), '\"', ' --ssl-certificate-key ', '\"', parameters('remoteEndpointCertificateKey'), '\"', ' --auth-type aad ', ' --auth-audience ', '\"', parameters('aadClientId'), '\"', ' --aad-appid ', '\"', parameters('aadClientId'), '\"', ' --aad-tenant ', '\"', parameters('aadTenantId'), '\"', ' --auth-issuer ', '\"', 'https://sts.windows.net/', parameters('aadTenantId'), '/', '\"', ' --aad-instance ', '\"', parameters('aadInstance'), '\"', ' --resource-group ', '\"', parameters('solutionName'), '\"', ' --release-version ', concat('\"', parameters('pcsReleaseVersion'), '\"'), ' --solution-type ', '\"', parameters('solutionType'), '\"', ' --deployment-id ', '\"', parameters('deploymentId'), '\"',  ' --storage-connstring ', '\"', 'DefaultEndpointsProtocol=https;AccountName=', parameters('storageName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('storageName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, '\"', ' --docdb-name ', '\"', parameters('documentDBName'), '\"', ' --solution-name ', '\"', parameters('solutionName'), '\"', ' --solution-setup-url ', '\"', parameters('solutionTemplateRepository'), '\"', ' --docker-tag ', '\"', parameters('pcsDockerTag'), '\"', ' --subscription-domain ', '\"', parameters('domain'), '\"', ' --subscription-id ',  concat('\"', subscription().subscriptionId, '\"'),' --aad-sp-client-id ', concat('\"', parameters('aadClientServicePrincipalId'), '\"'), ' --aad-app-secret ', concat('\"', parameters('aadClientSecret'), '\"'), ' --iothub-name ', concat('\"', parameters('iotHubName'), '\"'), ' --iothub-sku ', parameters('iotHubSku'), ' --iothub-tier ', parameters('iotHubTier'), ' --iothub-units ', parameters('iotHubUnits') ,' --iothub-connstring ', concat('\"', 'HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey, '\"'), ' --cloud-type ', concat('\"', parameters('cloudType'), '\"'), ' --app-insights-ikey ', concat('\"', parameters('applicationInsightsInstrumentationKey'), '\"'))]"
                  }
                }
              }
            ]
          }
        }
      },
      "tags": {
        "IotSuiteType": "[parameters('solutionType')]"
      }
    }
  ],
  "outputs": {
    "resourceGroup" : {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "iotHubConnectionString": {
      "type": "string",
      "value": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubApiVersion')).primaryKey)]"
    },
    "documentDBConnectionString" : {
      "type": "string",
      "value": "[concat('AccountEndpoint=', reference(variables('cosmosDBResourceId')).documentEndpoint, ';AccountKey=', listkeys(variables('cosmosDBResourceId'), variables('cosmosDBApiVersion')).primaryMasterKey, ';')]"
    },
    "azureWebsite": {
      "type": "string",
      "value": "[concat('https://', reference(concat('Microsoft.Web/sites/', parameters('azureWebsiteName'))).hostNames[0])]"
    },
    "vmFQDN": {
      "type": "string",
      "value": "[reference(variables('publicIPAddressName')).dnsSettings.fqdn]"
    },
    "adminUsername": {
      "type": "string",
      "value": "[parameters('adminUsername')]"
    }
  }
}
